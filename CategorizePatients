# read in the HCC mapping document provided on CMS website
map <- read.csv("/project/msca/capstone3/2014_icd_mapping.csv",header=T)
head(map)
names(map)
map <- map[,c(1,3,4,5,6)]
head(map)
names(map) <- c("DIAG","2013.HCC","PACE/ESRD.HCC","2014.HCC","Rx.HCC")

library(sqldf)
#patientHCC<-"select charges_all.*, icd9Dx.icd9_dx from charges_all left join icd9Dx on charges_all.patient_id=icd9Dx.patient_id and charges_all.encounter_id=icd9Dx.encounter_id"
patientHCC<-"select DIAG.*, map.* from DIAG left join map on DIAG.DIAG=map.DIAG"
patientHCC<- sqldf(patientHCC,stringsAsFactors=FALSE) #this works
nrow(patientHCC) #this is the correct number of rows; should be equal in length to nrow(DIAG), and it is
head(patientHCC) #this works
#lots of NAs. I'll try the map supplied by the software instead.


# attempt with new mapping

#read in the HCC mapping document provided by the HCC software
map2 <- read.delim("/project/msca/capstone3/F2213L2P.TXT",sep=" ",header=F)
head(map2)
# because there are different numbers of tabs, we need to create a new column that has all HCCs in 1 column.
# create new column for "category"
class(map2$V1)
#convert to numeric
map3 <- apply(map2[,2:7],2,as.numeric)
#replace NAs with 0
map3[is.na(map3)] <-0
#create new column that contains all the HCCs (1 per row)
map3 <- transform(map3,CC=V2+V3+V4+V5+V6+V7) #worked
map2$CC <- map3$CC
#remove obsolete rows
map2$V2 <- NULL
map2$V3 <- NULL
map2$V4 <- NULL
map2$V5 <- NULL
map2$V6 <- NULL
map2$V7 <- NULL
names(map2) <- c("DIAG","CC")
# now we have a direct mapping of icd9-code to CC.


#next, we assign our patients to their respective condition categories
patientHCC2<-"select DIAG.*, map2.* from DIAG left join map2 on DIAG.DIAG=map2.DIAG"
patientHCC2<- sqldf(patientHCC2,stringsAsFactors=FALSE) #this works
head(patientHCC2,30)
# we find that, with the SAS mapping as well, we have patients who are given diagnoses that do not have corresponding condition categories
# compare to the previous mapping
head(patientHCC,30)


#####JON's 8/21/15 CODE#####
##NOTE: Below, I:
#1) begin to group demographics and clean the data (turn 'W' to 'White', etc...
#2) Make times readable and created a duration of stay from the patEncFin table.

load("/project/msca/capstone3/all_tables_appended.RData")
icd9ProbList1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_icd9_prob_list.txt",sep="|",quote="",header=T)

head(patfin)
patfin2 <- patfin
#clean race
patfin$race[patfin$race == 'B'] <- 'Black/African-American'
patfin$race[patfin$race == 'W'] <- 'White'

#Organize date and time.   FYI - all tables w/ times involved are: icd9Dx, icd9_prob_list, icd9_proc, labs, meds_out,meds_in, flow
library("lubridate", lib.loc="/home/jberthet/R/x86_64-unknown-linux-gnu-library/3.2")
pef3 <- patEncFin
pef3$arrival <- ymd_hms(pef3$adm_date_offset)
pef3$departure <- ymd_hms(pef3$disch_date_offset)
pef3$duration <- seconds_to_period(pef2[,10] - pef2[,9])
pef3[2,11] + pef3[4,11]  #shows that you can arithmatic the dates
