# Steps in Final Data Cleaning
# STEP 1: Read in the tables
# this step loads all tables and stores them as RData files in capstone3. medsIn is stored separately.
# STEP 2: Append inpatient+outpatient files
# this step formats tables so  inpatient + outpatient can be appended, and appends.
# Step 3: Create time split

### STEP 1: Read in tables ###

# Step 1a: load libraries
#install.packages("readxl")
library(readxl)

# Step 1b: load inpatient tables (except medsIn)
patfin1 <- read.table("/project/msca/data/uchicagomed/Capstone/dr_9389_pat_fin.txt", sep="|", header=T)
patEncFin0 <-read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_pat_enc_fin2.txt", sep = "|", header=TRUE, fileEncoding = "UCS-2LE")
patEncFin1 <- read_excel("/project/msca/capstone3/Copy\ of\ dr_9389_pat_enc_fin2.xlsx")
charges <- read.table("/project/msca/data/uchicagomed/Capstone/dr_9389_charges.txt", sep = "|", header = TRUE)
chargesPOA <- read.table("/project/msca/data/uchicagomed/Capstone/dr_9389_charges_POA.txt", sep = "|", header = TRUE)
chargesAdmitPriority <- read.table("/project/msca/data/uchicagomed/Capstone/dr_9389_charges_admit_priority.txt", sep = "|", header = TRUE)
cptProc1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_cpt_proc.txt",sep="|",quote="",header=T)
icd9Dx1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_icd9_dx.txt",sep="|",quote="",header=T)
icd9Proc1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_icd9_proc.txt",sep="|",quote="",header=T)
icd9ProbList1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_labs.txt",sep="|",quote="",header=T)
flow1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_flow.txt",sep="|",quote="",header=T)
labs1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_labs.txt",sep="|",quote="",header=T)
medsOut1 <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_meds_out.txt",sep="|",quote="",header=T)

# Step 1c: load outpatient tables
patfin2 <- read.table("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_pat_fin.txt", sep="|", header=T)
patEncFin2 <- read.delim("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_pat_enc_fin.txt", sep = "|", header=TRUE, fileEncoding = "UCS-2LE")
GrahamOut <- read.csv("/project/msca/data/uchicagomed/Capstone_\ New\ Data/Graham_out_ALL_deID.csv", sep="|",header=T, fill=T)
cptProc2 <- read.table("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_cpt_proc.txt", sep = "|", header = TRUE, fileEncoding = "UCS-2LE")
icd9Dx2 <- read.table("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_icd9_dx.txt", sep = "|", header = TRUE, fileEncoding = "UCS-2LE")
icd9Proc2  <- read.table("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_icd9_proc.txt", sep = "|", header = TRUE, fileEncoding = "UCS-2LE")
icd9ProbList2 <- read.table("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_icd9_prob_list.txt", sep = "|", header = TRUE, fileEncoding = "UCS-2LE")
flow2 <- read.delim("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_flow.txt", sep = "|", header = TRUE, fileEncoding = "UCS-2LE")
labs2 <- read.delim("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_labs.txt",sep="|",quote="",header=T,fileEncoding="UTF-16LE")
medsOut2 <- read.delim("/project/msca/data/uchicagomed/Capstone_\ New\ Data/dr_9389_meds_out.txt",sep="|",quote="",header=T,fileEncoding="UCS-2LE")

# Step 1d: save all tables
#save(list=ls(all=TRUE),file="/project/msca/capstone3/all_tables.RData")

# Step 1e: save very large files separately
#medsIn is really big and will be loaded and stored separately
#medsIn <- read.delim("/project/msca/data/uchicagomed/Capstone/dr_9389_meds_in.txt",sep="|",quote="",header=T)
#save(medsIn,file="/project/msca/capstone3/medsIn.RData")
#rm(medsIn)


### STEP 2: Append inpatient+outpatient files ###

# for each file, I do the following:
# load both new and old data
# make column names consistent
# append the new data to the old to create 1 table
# remove the sub-table objects from global environment
# remove duplicates in the combined table
# write the combined table as an RData file
# save all the variables as an RData file

# Step 2a: load the files from Step 1.
# load("/project/msca/capstone3/all_tables.RData")

# Step 2b: make inpatient+outpatient files consistent, remove duplicates, and rbind them
#patfin
patfin <- rbind(patfin1, patfin2)
rm(patfin1)
rm(patfin2)
length(unique(patfin$patient_id)) #1 duplicate
which(duplicated(patfin$patient_id)==TRUE)
which(patfin$patient_id==patfin$patient_id[which(duplicated(patfin$patient_id)==TRUE)])
#make sure the rows are identical before deleting one of them
patfin[which(patfin$patient_id==patfin$patient_id[which(duplicated(patfin$patient_id)==TRUE)]),]
patfin <- patfin[-which(duplicated(patfin$patient_id)==TRUE),]
#patfin is now clean

#patEncFin
# first, merge in the 2 versions of the inpatient patEncFin tables (patEncFin0 & patEncFin1)
patEncFin0 <- subset(patEncFin0, select=c(patient_id,encounter_id,enc_eio,enc_fin_class))
patEncFin1 <- subset(patEncFin1, select=-c(adm_date_offset,disch_date_offset)) #remove columns not found in patEncFin2
patEncFin01 <- merge(patEncFin0,patEncFin1,by=c("patient_id","encounter_id"))
# reorder names for the rbind
patEncFin01 <- patEncFin01[,c(which(names(patEncFin01)=="patient_id"),which(names(patEncFin01)=="encounter_id"),which(names(patEncFin01)=="age_at_enc"),which(names(patEncFin01)=="start_date_offset"),which(names(patEncFin01)=="end_date_offset"),which(names(patEncFin01)=="enc_eio"),which(names(patEncFin01)=="enc_fin_class"),which(names(patEncFin01)=="discharge_dispo"))]
#rbind
patEncFin <- rbind(patEncFin01, patEncFin2)
rm(patEncFin0)
rm(patEncFin1)
rm(patEncFin01)
rm(patEncFin2)
nrow(patEncFin)
length(unique(patEncFin$encounter_id))
nrow(unique(patEncFin[,1:2])) # no duplicates
#if duplicates are present, run the next 2 lines to view & fix them
#patEncFin[which(patEncFin$encounter_id==patEncFin$encounter_id[which(duplicated(patEncFin$encounter_id)==TRUE)]),]
#patEncFin <- patEncFin[-which(patEncFin$encounter_id==patEncFin$encounter_id[which(duplicated(patEncFin$encounter_id)==TRUE)]),]
nrow(patEncFin)==nrow(unique(patEncFin[,1:2])) # no duplicates


#flow
names(flow1)==names(flow2)
flow <- rbind(flow1,flow2)
rm(flow1)
rm(flow2)

#cptProc
names(cptProc1)==names(cptProc2)
names(cptProc1)
names(cptProc2)
#cptProc2 is actually just patfin. We will exclude cptProc tables from analysis.
rm(cptProc1)
rm(cptProc2)

#icd9Dx
names(icd9Dx1)==names(icd9Dx2)
icd9Dx <- rbind(icd9Dx1,icd9Dx2)
rm(icd9Dx1)
rm(icd9Dx2)
nrow(icd9Dx)
nrow(unique(icd9Dx[,1:2])) #205,685 unique encounter_ID/patient_ID combinations
length(unique(icd9Dx$encounter_id)) #241,834 unique encounter ID numbers represented
nrow(icd9Dx) #884,803

#icd9Proc
names(icd9Proc1)==names(icd9Proc2)
icd9Proc <- rbind(icd9Proc1,icd9Proc2)
rm(icd9Proc1)
rm(icd9Proc2)
nrow(icd9Proc) #69717 rows
nrow(unique(icd9Proc[,1:2])) #22695 unique patient/encounter combinations

#icd9ProbList
names(icd9ProbList1)
names(icd9ProbList2)
#column names differ significantly.  We will exclude icd9ProbList from analysis for now
rm(icd9ProbList1)
rm(icd9ProbList2)

#labs
names(labs1) == names(labs2)
labs <- rbind(labs1,labs2)
rm(labs1)
rm(labs2)

#medsOut
names(medsOut1)==names(medsOut2)
medsOut <- rbind(medsOut1,medsOut2)
rm(medsOut1)
rm(medsOut2)

#charges_all
#clean GrahamOut
GrahamOut <- GrahamOut[-(grep('NULL',GrahamOut$PATIENT_ID)),] #remove rows with absent patient_ids
nrow(unique(GrahamOut[,1:2])) #371072 patient encounters are represented
sum(duplicated(GrahamOut[,1:2])) # no duplicates
names(GrahamOut) # the way the col names are written is slightly different between GrahamOut & chargesPOA
#[1] "PATIENT_ID"                        "encounter_ID"                     
#[3] "ICD_9_CM_Diagnosis_Principal"      "ICD_9_CM_Diagnosis_Principal_Name"
#[5] "Patient_Count"                     "Charges"                          
#[7] "Direct_Cost"                       "Indirect_Cost"                    
#[9] "Operating_Cost" 
names(GrahamOut)[1] <- "patient_id"
names(GrahamOut)[2] <- "encounter_id"
names(chargesPOA)
nrow(chargesPOA)
nrow(chargesPOA[(grep('NULL',chargesPOA$Encounter_ID)),]) #no NULL encounter_ID vals in chargesPOA
nrow(chargesPOA[(grep('NULL',chargesPOA$Patient_ID)),]) #no NULL patient_ID vals in chargesPOA
# GrahamOut
# create a charges table with all patient encounters
# utilization does not contain diagnosis information
charges_new <- GrahamOut[,-c(3:5)]
names(charges_new)
charges_old <- transform(charges,Operating_cost=Direct.Cost+Indirect.Cost)
charges_old <- charges_old[,c(2,1,3,4,5,6)]
names(charges_old) <- names(charges_new)
charges_all <- rbind(charges_old,charges_new)
rm(charges_old)
rm(charges_new)
dim(charges_all)
nrow(unique(charges_all[,1:2])) # appears to be 1 duplicate
charges_all[(duplicated(charges_all[,1:2])),1:2]
charges_all[which((charges_all$patient_id==1976119) & (charges_all$encounter_id==7385344)),] #duplicates are identical
charges_all <- charges_all[-10299,] # remove the duplicate
charges_all[(duplicated(charges_all[,1:2])),1:2] # no more duplicated rows

# Save the tables. This line has been run, so you just need to re-run it if you've modified any of the above.
# save(list=ls(all=TRUE),file="/project/msca/capstone3/all_tables_appended.RData")

### STEP 3: Create Time Split ###

# load libraries & files
library(plyr)
load("/project/msca/capstone3/all_tables_appended.RData")

# create a table of dates of patient encounters; 
admit_dates <- patEncFin[,c(1:2,4:5)] #create a table of patient encounter dates (admission & discharge)
admit_dates$admission <-as.POSIXct(as.character(admit_dates$start_date_offset), format="%Y-%m-%d %H:%M:%S")
admit_dates$discharge <- as.POSIXct(as.character(admit_dates$end_date_offset), format="%Y-%m-%d %H:%M:%S")
#The following 3 lines fix the issue of NAs in discharge dates - NO LONGER NECESSARY thanks to data received in Oct. 2015
#admit_dates$discharge2 <- admit_dates$discharge #create new column for discharge dates
#no_disch_date2 <- which(is.na(admit_dates$discharge))
#admit_dates$discharge2[no_disch_date2] <- admit_dates$admission[no_disch_date2] #now discharge2 has a discharge date for every entry


#create a table of important dates at the patient level: first and last admissions, and last discharge; plus the first value of admit_year
# note: we will only need to use admit_year for patients with 1 encounter)
admissions <- ddply(admit_dates, "patient_id",summarise, first_admission=min(admission),last_admission=max(admission),last_discharge=max(discharge),num_encounters=length(encounter_id))#takes a minute


#calculate range (span over time, in # of days) of patient encounter dates (distance between first_admission and last_discharge), and divide in two.
admissions$date_range <- difftime(admissions$last_discharge,admissions$first_admission,units="days")
admissions$half_date_range <- admissions$date_range/2 

# determine the cutoff date: last_admission - 1/2(distance between first and last encounter dates)
admissions$cutoff_date <- admissions$last_discharge - admissions$half_date_range
# for patients with only 1 encounter, we randomly add or substract 1 day to their cutoff date
admissions$rand_samp <- as.difftime(sample(c(-1,1),nrow(admissions),replace=T),unit="days")
admissions$cutoff_date[which(admissions$num_encounters==1)] <-  admissions$cutoff_date[which(admissions$num_encounters==1)] + admissions$rand_samp[which(admissions$num_encounters==1)]


#merge charges_all with admissions to get the dates for each encounter
charges_split <- merge(charges_all, admit_dates[,c(1:2,which(names(admit_dates)=="discharge"))],by=c("patient_id","encounter_id"),all.x=TRUE) #same nrows as charges_all, 393925
#now, merge with admission table to create a column of cutoff dates
charges_split <- merge(charges_split,admissions[,c(which(names(admissions)=="patient_id"),which(names(admissions)=="cutoff_date"))],by="patient_id",all.x=T)
charges_above <- subset(charges_split,discharge>cutoff_date)#charges above cutoff; note the >= here
charges_below <- subset(charges_split,discharge<=cutoff_date) #charges below cutoff;
nrow(charges_above) #[1] 192275
nrow(charges_below) #[1] 199098
# we have a comparable number of encounters above and below the cutoff dates.

# create object that identifies encounter_ids that are above or below the cutoff
charges_split$above_cutoff <- 0
charges_split$above_cutoff[which(charges_split$discharge>charges_split$cutoff_date)] <- 1
head(charges_split$above_cutoff)
length(which(charges_split$above_cutoff==0)) #201650
length(which(charges_split$above_cutoff==1)) #192275
charges_split <- charges_split[,c(1:3,7:9)]
save(charges_split,file="/project/msca/capstone3/charges_split.RData")


# calculate year2 charges, and while we're at it, why not calculate y1 charges as well
charges_y2 <- ddply(charges_above, "patient_id",summarise, charges=sum(as.numeric(Charges),na.rm=T))
charges_y1 <- ddply(charges_below, "patient_id",summarise, charges=sum(as.numeric(Charges),na.rm=T))
nrow(charges_y2)#46901
nrow(charges_y1)#48426
length(unique(charges_all$patient_id))#56809
# note that the number of rows in this charges data set is equal to the number of unique patient_ids in those data sets
# note, more importantly, that neither of the number of rows in this data set is equal to the total number of patient ids in charges_all
# this is fine; we just need to merge back in our patients that got lost during the ddply compression to a patient-level matrix.
save(charges_y2,file="/project/msca/capstone3/charges_y2.2.RData")
save(charges_y1,file="/project/msca/capstone3/charges_y1.2.RData")


#merge in y1 & y2 costs
admissions <- merge(admissions,charges_y1,all.x=T)
names(admissions)[which(names(admissions)=="charges")]="charges_y1"
admissions <- merge(admissions,charges_y2,all.x=T)
names(admissions)[which(names(admissions)=="charges")]="charges_y2"
length(which(is.na(admissions$charges_y1) & is.na(admissions$charges_y2))) # 728 patients have no charge data in charges_all. We expected this - see next line.
length(unique(patEncFin$patient_id)) - length(unique(charges_all$patient_id)) #719 patients in patEncFin who didn't have charge data in charges_all
#We expected this because there are 719 patients in patEncFin who have encounters, but no charge data, so we don't know what their charges are for those encounters.
#Therefore, we remove those patients who have NAs for BOTH columns
admissions <- admissions[-which(is.na(admissions$charges_y1) & is.na(admissions$charges_y2)),]
# We set the remaining NA charges to 0, because these refer to patients who had at least 1 charged encounter in the 2-year period.
# This works because these patients didn't appear in charges_y1 data set because they actually had no y1 encounters.
# So charges does in fact = 0 for these NA values.
admissions$charges_y1[which(is.na(admissions$charges_y1))] <- 0
admissions$charges_y2[which(is.na(admissions$charges_y2))] <- 0


#Create a table that ties together patient_id, cutoff date, and year1 & year2 charges
patient_cutoff_charges <- admissions[,c(which(names(admissions)=="patient_id"),which(names(admissions)=="cutoff_date"),which(names(admissions)=="charges_y1"),which(names(admissions)=="charges_y2"))]
save(patient_cutoff_charges,file="/project/msca/capstone3/patient_cutoff_charges.RData")

### STEP 4: 
