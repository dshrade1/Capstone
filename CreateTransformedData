###### Part 1
library(MASS)
library(caret)

load("/project/msca/capstone3/diag2.RData")
load("/project/msca/capstone3/patient_matrixrevise.RData")
df <- df[,c(1:16)] #get rid of log-transformed and clustered variables.

# separate the numeric variables from the non-numeric variables
classes <- list()
for (i in 1:ncol(df)) {
  classes[i]<-class(df[,i])
}
df_num <- df[,c(which(classes=="numeric"|classes=="integer"))]
df_cat <- df[,-(which(classes=="numeric"|classes=="integer"))]
# note - df_num does NOT contain patient_id numbers - this is intentional


# create ICD-9 code matrix
diag_matrix <- as.matrix(diag2[,2:ncol(diag2)])
colnames(diag_matrix) <- names(diag2)[2:ncol(diag2)]
rownames(diag_matrix) <- diag2$patient_id

# create True/False ICD-9 code matrix

diagTF <- matrix(FALSE,nrow=nrow(diag2),ncol=(ncol(diag2)-1))
colnames(diagTF) <- names(diag2)[2:ncol(diag2)]
rownames(diagTF) <- diag2$patient_id
diagTF[which(diag_matrix!=0)] <- TRUE 


##### Part 2


# convert ICD-9 variables to numeric data frame
class(diag_matrix[,1])
diag_matrix_num <- apply(diag_matrix,2,as.numeric)
df_diag_num  <- cbind(diag2$patient_id,as.data.frame(diag_matrix_num))
names(df_diag_num)[1] <- "patient_id"


# create merged table files
df_diag_all_num <- merge(df,df_diag_num)
df_diag_all_num$age_y2 <- as.numeric(df_diag_all_num$age_y2)
save(df_diag_all_num, file="/project/msca/capstone3/df_diag_all_num.RData")
df_diag <- merge(df, diag2)
save(df_diag,file="/project/msca/capstone3/df_diag.RData")

# create data matrix with True/false ICD-9
diagTF2 <- cbind(diag2$patient_id,as.data.frame(diagTF))
names(diagTF2)[1] <- "patient_id"
df_TF <- merge(df,diagTF2)
save(df_TF,file="/project/msca/capstone3/df_TF.RData")



# train/test split
train <- sample(1:nrow(df_diag_all_num),floor(0.7*nrow(df_diag_all_num)))
train_data <- df_diag_all_num[train,]
test_data <- df_diag_all_num[-train,]
save(train_data,test_data, file="/project/msca/capstone3/df_diag_all_num.RData")


# separate the numeric variables from the non-numeric variables
classes <- list()
for (i in 1:ncol(df_diag_all_num)) {
  classes[i]<-class(df_diag_all_num[,i])
}

# collect the numeric or integer-valued columns into a single data frame (plus patient_id number)
train_num <- train_data[,c(which(classes=="numeric"))]
# note - df_num does NOT contain patient_id numbers - this is intentional
# collect categorical (non-numeric, non-integer-valued) columns into a separate data frame (plus patient_id number)
train_cat <- train_data[,-(which(classes=="numeric"))]
test_num <- test_data[,c(which(classes=="numeric"))]
test_cat <- test_data[,-(which(classes=="numeric"))]


#preprocess the numeric training data
preProcessDF <- preProcess(train_num,method=c("BoxCox")) 
# warning! lots of variables w/0 variances

train_transf <- predict(preProcessDF,train_num)
test_transf <- predict(preProcessDF,test_num)
sum(train_transf[,15]) #this is one of those variables - see how sum is 0. Maybe this is fine.
# these convert all values for those columns to 0!

### I'll create 2 main data sets 
### df1 has all numeric variables scaled.
df1_train <- cbind(train_cat,train_transf)
df1_test <- cbind(test_cat,test_transf)

### df2 has scaled non-ICD9 numeric variables, and TF for ICD9
#break df_TF into categorical and numeric variabls
classes <- list()
for (i in 1:ncol(df_TF)) {
  classes[i]<-class(df_TF[,i])
}
df_TF_num <- df_TF[,c(which(classes=="numeric"|classes=="integer"))]
df_TF_cat <- df_TF[,-(which(classes=="numeric"|classes=="integer"))]

# break into test and train
df_TF_num_train <- df_TF_num[train,]
df_TF_num_test <- df_TF_num[-train,]
df_TF_cat_train <- df_TF_cat[train,]
df_TF_cat_test <- df_TF_cat[-train,]
#transform
preProcessDF <- preProcess(df_TF_num_train,method=c("BoxCox"))
train_transf2 <- predict(preProcessDF,df_TF_num_train)
test_transf2 <- predict(preProcessDF,df_TF_num_test)

df2_train  <- cbind(df_TF_cat_train,train_transf2)
df2_test <- cbind(df_TF_cat_test,test_transf2)

# save both data sets
save(df1_train,df1_test,file="/project/msca/capstone3/df1.RData")
save(df2_train,df2_test,file="/project/msca/capstone3/df2.RData")


### Create data set with BoxCox-transformed numeric variable
head(names(df),20)
preProcessCost <- preProcess(as.matrix(df$y2_charges),method="BoxCox")
names(preProcessCost)
