load("/project/msca/capstone3/all_tables_appended.RData")

library(lubridate)
library(sqldf)
library("dplyr", lib.loc="/software/R-3.2-el6-x86_64/lib64/R/library")
library("plyr", lib.loc="/software/R-3.2-el6-x86_64/lib64/R/library")
library("rpart", lib.loc="/software/R-3.2-el6-x86_64/lib64/R/library")#Classification Tree
library("party", lib.loc="/home/kjtong/R/x86_64-unknown-linux-gnu-library/3.2")
library("randomForest", lib.loc="/home/kjtong/R/x86_64-unknown-linux-gnu-library/3.2")

########################
#########STEP 1#########
###VARIABLE CREATION####
########################

#Add 'duration' variable
pef3<- patEncFin
pef3$arrival <- ymd_hms(pef3$adm_date_offset)
pef3$departure <- ymd_hms(pef3$disch_date_offset)
pef3$duration <- seconds_to_period(pef3[,10] - pef3[,9])
pef3$los<- day(pef3$duration)#length of stay in days
pef3 <- subset(pef3, !is.na(los)) #remove all NA's because some of the patients are inpatients and some had no hospitalizations, but their date of discharge was still NA 

#Add 'age' to patfin table
join_patfinage <- merge(patfin,pef3,by.x=c("patient_id"),by.y=c("patient_id"), byall.x=TRUE)
join_patfinage$adm_date_offset<-NULL
join_patfinage$disch_date_offset<-NULL
join_patfinage$enc_eio<-NULL
join_patfinage$discharge_dispo<-NULL
join_patfinage$departure<-NULL
join_patfinage$duration<-NULL

#Add sum los + encounter freq
sumlos <- ddply(join_patfinage,.(patient_id),summarise,sumlos=sum(los))  #sum of LOS across encounters
join_patfinage$encounter_id <- 1
encountfreq<-ddply(join_patfinage,.(patient_id),summarise,encountfreq=sum(encounter_id))#find sum of length of stays across encounters
losjoin <- merge(join_patfinage,sumlos,by.x=c("patient_id"),by.y=c("patient_id"), byall.x=TRUE)
encountjoin<- merge(losjoin,encountfreq,by.x=c("patient_id"),by.y=c("patient_id"), byall.x=TRUE)

#Add hospitilizations + total patient costs. 
enc_charges <- merge(charges_all,patEncFin,by.x=c("patient_id","encounter_id"),by.y=c("patient_id","encounter_id"), byall.x=TRUE)
#number of hospitalizations per patient, plus cost
enc_charges$inpatient <- 0
enc_charges$inpatient[which(enc_charges$enc_eio=="E, I,")] <- 1
enc_charges$inpatient[which(enc_charges$enc_eio=="I,")] <- 1
enc_charges$inpatient[which(enc_charges$enc_eio=="I, O,")] <- 1
charges.na <- as.numeric(enc_charges$Charges)
enc_charges$Charges <- as.numeric(enc_charges$Charges)
enc_charges <- enc_charges[-which(is.na(charges.na)),]
patient_util <- ddply(enc_charges,"patient_id",summarise,hospitalizations=sum(inpatient),total_charges=sum(Charges))

patfinutil <- merge(encountjoin, patient_util,by.x=c("patient_id"),by.y=c("patient_id"), byall.x=TRUE)
patfinutil<-patfinutil %>% distinct #remove duplicate rows
length(patfinutil$patient_id)
length(unique(patfinutil$patient_id))
patfinutil<-patfinutil[!duplicated(paste(patfinutil[,1])),] #remove all duplicated patient ID's
patfinutil$encounter_id<-NULL
patfinutil$los<-NULL


########################
#########STEP 2#########
######TEST / TRAIN######
########################

#Train = All '12 + Q1,Q2 '13 + 50% of random('13Q3 - '14Q2)
#Test = All '15 + Q3,Q4 '14 + 50% of random('12Q3 - '13Q2)
hist(patfinutil$arrival, breaks = 100)  #Distribution of time
train1 <- patfinutil[patfinutil$arrival <= "2012-12-31",]
train2 <- patfinutil[ which(patfinutil$arrival >= "2013-01-01" & patfinutil$arrival <= "2013-06-30"),]
#50% split
split1 <- patfinutil[ which(patfinutil$arrival >= "2013-07-01" & patfinutil$arrival <= "2014-06-30"),]
ssize <- floor(0.5*nrow(split1))
train_ind <- sample(seq_len(nrow(split1)), size= ssize)
train3 <- split1[train_ind,]
train <- rbind(train1, train2, train3)
y=log(train$total_charges)#transform y to normal distribution
train$total_charges <- replace(y,y=="-Inf",0)#remove -inf
hist(train$total_charges,100)
train <- subset(train, total_charges > 0) #remove 0's                         
                             
#Test
test1 <- patfinutil[patfinutil$arrival >= "2015-01-01",]
test2 <- patfinutil[ which(patfinutil$arrival >= "2014-07-01" & patfinutil$arrival <= "2014-12-31"),]
test3 <- split1[-train_ind,]
test <-rbind(test1, test2, test3)
y1=log(test$total_charges) #transform y to normal distribution
test$total_charges <- replace(y1,y1=="-Inf",0)#remove -inf
test <- subset(test, total_charges > 0) #remove 0's

# #Test/Train based on mean arrival
# train.mean <- pef3[pef3$arrival >= mean(pef3$arrival),]
# test.mean <- pef3[pef3$arrival < mean(pef3$arrival),]
 
# #Test/Train based on median arrival
# train.median <- pef3[pef3$arrival >= median(pef3$arrival),]
# test.median <- pef3[pef3$arrival < median(pef3$arrival),]



########################
#########STEP 3#########
#########CLUSTER########
########################

#cluster charges, K=6
trainmatrix<-data.matrix(train)
km.charges <- kmeans(data.matrix(train[,13]), 6, nstart=50)
plot(data.matrix(trainmatrix[,13]), col = (km.charges$cluster+1), main = "kmeans k=6", pch=20, cex=1)
km.charges$centers
#NOTE: cluster #s change after each run, so double check!
#Bind cluster categories w/ 'charges' table
train <- cbind(train, cl = km.charges$cluster)                                              
chclust <- as.numeric(km.charges$cluster)
train$chargesClustered <- chclust
                              
#Create Charge Cluster data
c1 <- train[train$chargesClustered == 1,]
c2 <- train[train$chargesClustered == 2,]
c3 <- train[train$chargesClustered == 3,]
c4 <- train[train$chargesClustered == 4,]
c5 <- train[train$chargesClustered == 5,]
c6 <- train[train$chargesClustered == 6,]

#Summary of clusters
summary(c1)[,3];summary(c2)[,3];summary(c3)[,3];summary(c4)[,3];summary(c5)[,3];summary(c6)[,3]
nrow(c1); nrow(c2);nrow(c3);nrow(c4);nrow(c5)

#mean charge by race by cluster
ddply(c6, .(sex), summarise, mean_charge=mean(total_charges))


########################
#########STEP 4#########
######LINEAR REG########
########################

#Full population
hist(train$total_charges)

#lm Hospitalizations
fulllmhosp<-lm(total_charges~hospitalizations, data=train)
summary(fulllmhosp)
# plot(fulllmhosp)
fulllmhosp.MSE <- mean((fulllmhosp$fitted.values - train$total_charges)^2)

#Sum LOS
fulllmlos<-lm(total_charges~sumlos, data=train)
summary(fulllmlos)
# plot(fulllmlos)
fulllmlos.MSE <- mean((fulllmlos$fitted.values - train$total_charges)^2)

#EncountFreq
fulllmencount<-lm(total_charges~encountfreq, data=train)
summary(fulllmencount)
# plot(fulllmencount)
fulllmencount.MSE <- mean((fulllmencount$fitted.values - train$total_charges)^2)

#Total
fulllmhosplosencount<-lm(total_charges~hospitalizations+sumlos+encountfreq, data=train)
summary(fulllmhosplosencount)
anova(fulllmhosplosencount)
# plot(fulllmhosplosencount)
fulllmhosplosencount.MSE <- mean((fulllmhosplosencount$fitted.values - train$total_charges)^2)

predictfull<-predict(fulllmhosplosencount,newdata=test)
summary(predictfull)
fulllmhosplosencounttest.MSE <- mean((predictfull - test$total_charges)^2)
plot(predictfull)
hist(predictfull)



##################
##################
###COMPARATIVE STATS######
#MSE
fulllmhosp.MSE
fulllmlos.MSE
fulllmencount.MSE
fulllmhosplosencount.MSE

AIC(fulllmhosp)
AIC(fulllmlos)
AIC(fulllmencount)
AIC(fulllmhosplosencount)
#The transformed model with all 3 predictors performs best, hospitalizations is best predictor


#Regressions for each cluster
c1lm<-lm(total_charges~hospitalizations+sumlos+encountfreq, data=c1)
summary(c1lm)
AIC(c1lm)

c2lm<-lm(total_charges~hospitalizations+sumlos+encountfreq, data=c2)
summary(c2lm)
AIC(c2lm)

c3lm<-lm(total_charges~hospitalizations+sumlos+encountfreq, data=c3)
summary(c3lm)
AIC(c3lm)

c4lm<-lm(total_charges~hospitalizations+sumlos+encountfreq, data=c4)
summary(c4lm)
AIC(c4lm)

c5lm<-lm(total_charges~hospitalizations+sumlos+encountfreq, data=c5)
summary(c5lm)
AIC(c5lm)

#Compare AIC
AIC(c5lm);AIC(c1lm);AIC(c2lm);AIC(c3lm);AIC(c4lm)


########################
#########STEP 5#########
######DECISION TREE#####
########################


#Decision Tree
#DT - Train
ttrain <- as.data.frame(table(train$enc_fin_class))
ttrain <- as.data.frame(ttrain[with(ttrain, order(-Freq)), ]) ; head(ttrain)
#Measure Proportion of patients in top 32 providers
ttrain$proportion <- ttrain$Freq / sum(ttrain$Freq)
df <- head(ttrain,32); sum(df$proportion);df  #The % of patients in the top 32 providers by size of patients                
#Use only rows with top 32 providers
df$Var2 <- as.numeric(df$Var1)
names(df)[1] <- "enc_fin_class"  
df2 <- merge(train, df, by.x=c("enc_fin_class"),by.y=c("enc_fin_class"), byall.x=TRUE)                                                     
ttrain <- df2[,c(1,3,4,6,8,10,11,12,14)]
ttrain2 <- train[,c(2,3,5,6,7,8,10,11,12,14)]

#DT - Test
ttest <- as.data.frame(table(test$enc_fin_class))
ttest <- as.data.frame(ttest[with(ttest, order(-Freq)), ]) ; head(ttest)
#Measure Proportion of patients in top 32 providers
ttest$proportion <- ttest$Freq / sum(ttest$Freq)
df <- head(ttest,32); sum(df$proportion);df  #The % of patients in the top 32 providers by size of patients 

df$Var2 <- as.numeric(df$Var1)
names(df)[1] <- "enc_fin_class"  
df2 <- merge(test, df, by.x=c("enc_fin_class"),by.y=c("enc_fin_class"), byall.x=TRUE)                                                     
ttest <- df2[,c(1,3,4,6,8,10,11,12,14)]
ttest2 <- test[,c(2,3,5,6,7,8,10,11,12,14)]


#Cluster Numerical Columns
#train$age_at_enc: 109 unique to
                              
#train$sumlos: 137 unique to 
                              
#train$encountfreq: 147 unique to 
fml <- cl ~ .
t.charges <- rpart(fml, data=ttrain2)
summary(t.charges)  #show splits
#Plot   
plot(t.charges, uniform = TRUE, main = "km 6 DT")
text(t.charges, use.n=TRUE,all=TRUE, cex = 0.8)                              
#show results
printcp(t.charges)
plotcp(t.charges) #cross-validation results
#tabulate data
table(subset(ttrain, encountfreq==12)$race)

#party package
ct <- ctree(fml, data=ttrain)
# plot(ct, main = "Conditional Inference Tree")
table(predict(ct, newdata = test, type = "prob"))

#Estimate test error #CAN"T WORK
tree.pred <- predict(t.charges, test[,c(2,3,5,7,8,10,11,12)], type = "class")    #ERROR cuz won't calculate
table(tree.pred, test, type = "class")


########################
#########STEP 7#########
######RANDOM FOREST#####
########################
rf.fit <- randomForest(fml, data = ttrain2,
                       mtry = 10,
                       ntree= 50,
                       importance = TRUE,
                       test = test$cl)
