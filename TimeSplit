#separating the data
load("/project/msca/capstone3/all_tables_appended.RData")

# create a table of dates of patient encounters; explore dates with histograms
admit_dates <- patEncFin[,c(1:2,4:5)] #create a table of patient encounter dates (admission & discharge)
admit_dates$admission <-as.POSIXct(as.character(admit_dates$adm_date_offset), format="%Y-%m-%d %H:%M:%S")
hist(admit_dates$admission,breaks=100) #look at distribution of all admission dates
admit_dates$admit_year<-as.numeric(format(admit_dates$admission,"%Y")) #create a column of just admission year
admit_dates$discharge <- as.POSIXct(as.character(admit_dates$disch_date_offset), format="%Y-%m-%d %H:%M:%S")
hist(admit_dates$admit_year) # we see start dates in 2012, 2013, 2014, plus a few in 2015

#create a table of important dates at the patient level: first and last admissions, and last discharge
admissions <- ddply(admit_dates, "patient_id",summarise, first_admission=min(admission),last_admission=max(admission),last_discharge=max(discharge))
#calculate range (span over time, in # of days) of patient encounter dates for each patient
admissions$date_range <- difftime(admissions$last_admission,admissions$first_admission,units="days")
#explore date ranges
max(admissions$date_range)
min(admissions$date_range)
hist(as.numeric(admissions$date_range),breaks=200) #most patients have only 1 encounter
names(admissions)[4] <- "last_dischargeNA"
#there are many blank discharge dates. I'll replace NAs with the date of the last admission.
admissions$last_discharge <- admissions$last_dischargeNA
no_disch_date <- which(is.na(admissions$last_dischargeNA))
admissions$last_discharge[no_disch_date] <- admissions$last_admission[no_disch_date]
sum(is.na(admissions$last_discharge)) # no more blank discharge dates
#now last discharge contains either (A)discharge date, or if discharge date is blank, (B)the last admission date
# these dates will be used to determine each patient's year1/year2 cutoff.

#determine the date 365 days before the last discharge
admissions$cutoff_date <- admissions$last_discharge - as.difftime(365,unit="days")

# Plan going forward: to sum costs of encounter_ids that happened after cutoff date
#how to identify next-year's costs
### find each patient's last encounter date/latest discharge date 
### find the date 1 year before that date (date-365)
### choose encounter IDs that happened after that 1-year mark.
### sum the charges for those encounter IDs to calculate year2 costs. 

# Create the columns I made for admissions, except implement them in the admit_dates table
admit_dates$discharge2 <- admit_dates$discharge #create new column for discharge dates
no_disch_date2 <- which(is.na(admit_dates$discharge))
nrow(admit_dates)#465682 encounters total
length(no_disch_date2) #12546 lack discharge date
admit_dates$discharge2[no_disch_date2] <- admit_dates$admission[no_disch_date2] #now discharge2 has a discharge date for every entry

#merge charges_all with admissions to get the dates for each encounter
charges_split <- merge(charges_all, admit_dates[,c(1:2,5,8)],by=c("patient_id","encounter_id"),all.x=TRUE) #should be equal to length of charges all, 393925
nrow(charges_split) #it is indeed equal to the length of charges_all
#now, merge with admission table to create a column of cutoff dates
charges_split <- merge(charges_split,admissions[,c(1,7)],by="patient_id",all.x=T)

# Separate out the rows whose discharge dates (I just picked between discharge and admission) are below the cutoff date
# number of rows removed (below cutoff) should be less than half of the total
nrow(charges_split)#393925
charges_below <- subset(charges_split,discharge2<cutoff_date) #charges below cutoff
nrow(charges_below)#125722
charges_above <- subset(charges_split,discharge2>cutoff_date)#charges above cutoff
nrow(charges_above) #267631
# we find that indeed, the number of rows below the cutoff is fewer than the number of rows within the cutoff.

#now, with the days below the cutoff, summarise to get a number that contains the cost for an individual patient.
charges_y2 <- ddply(charges_above, "patient_id",summarise, Charges=sum(as.numeric(Charges),na.rm=T))
sum(is.na(charges_y2$Charges)) #apparently no NAs, despite 7 warnings for NAs...
nrow(charges_y2) #56780 patients total. Compare this to the number of patients we had determined were represented in charges data previously:
length(unique(charges_all$patient_id)) #56809, not too big of a difference
#now we just keep the 56780 patients for which we have y2 values. 
save(charges_y2,file="/project/msca/capstone3/charges_y2.RData")

#create train/test split for those patients for which we have y2 charges values. THis should be just about all of the patients. 56,780 patients
#we make that train/test split based on random 70/30 sample of patient_id values
train <- sample(1:length(charges_y2$patient_id),floor(0.7*length(charges_y2$patient_id)))
train_ids <- charges_y2$patient_id[train]#these are the patient_ids in our training set
test_ids <- charges_y2$patient_id[-train]#these are the patient_ids in our test set
save(train_ids,file="/project/msca/capstone3/train_ids.RData")
save(test_ids,file="/project/msca/capstone3/test_ids.RData")
